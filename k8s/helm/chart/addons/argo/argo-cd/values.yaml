argo-cd:
    crds:
      install: true
      keep: true
      
      
    global:
  # -- Default domain used by all components
  ## Used for ingresses, certificates, SSO, notifications, etc.
      domain: ""


    configs:
      cm:    
       #url: argocd.com  -> Argocd endpoint in case of oidc is enabled
        kustomize.buildOptions: "--enable-helm"       
        create: true
        application.instanceLabelKey: argocd.argoproj.io/instance
        exec.enabled: true     
        admin.enabled: true   
        accounts.uddeshya: login, apiKey
        
        # use if dex is enabled
        
        # Dex configuration
        # dex.config: |
        #   connectors:
        #     # GitHub example
        #     - type: github
        #       id: github
        #       name: GitHub
        #       config:
        #         clientID: aabbccddeeff00112233
        #         clientSecret: $dex.github.clientSecret # Alternatively $<some_K8S_secret>:dex.github.clientSecret
        #         orgs:
        #         - name: your-github-org
        

       
      params:
        create: true
        server.insecure: true
        server.enable.gzip: true
        applicationsetcontroller.enable.progressive.syncs: true

      rbac:
        create: true
        policy.csv: ''        
        # Policy rules are in the form:
        #  p, subject, resource, action, object, effect
        # Role definitions and bindings are in the form:
        #  g, subject, inherited-subject
        # policy.csv: |
        #   p, role:org-admin, applications, *, */*, allow
        #   p, role:org-admin, clusters, get, *, allow
        #   p, role:org-admin, repositories, *, *, allow
        #   p, role:org-admin, logs, get, *, allow
        #   p, role:org-admin, exec, create, */*, allow
        #   g, your-github-org:your-team, role:org-admin

        # -- OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).
        # The scope value can be a string, or a list of strings.
        scopes: "[groups]"


      repositories: {}
#        k8s:
#          url: https://github.com/yup3219/setup-argo-minikube.git
#          username: yup3219
#          password: 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
          
          
          
      clusterCredentials:  {}
#        - name: minikube-cluster
#          server: https://kubernetes.default.svc
#          labels: 
#            clusterName: minikube-cluster
#          annotations: {}
#          config:
#            tlsClientConfig:
#            insecure: false
     
        # - name: mycluster
        #   server: https://mycluster.example.com
        #   labels: {}
        #   annotations: {}
        #   config:
        #     bearerToken: "<authentication token>"
        #     tlsClientConfig:
        #       insecure: false
        #       caData: "<base64 encoded certificate>"
        # - name: mycluster2
        #   server: https://mycluster2.example.com
        #   labels: {}
        #   annotations: {}
        #   namespaces: namespace1,namespace2
        #   clusterResources: true
        #   config:
        #     bearerToken: "<authentication token>"
        #     tlsClientConfig:
        #       insecure: false
        #       caData: "<base64 encoded certificate>"
        # - name: mycluster3-project-scoped
        #   server: https://mycluster3.example.com
        #   labels: {}
        #   annotations: {}
        #   project: my-project1
        #   config:
        #     bearerToken: "<authentication token>"
        #     tlsClientConfig:
        #       insecure: false
        #       caData: "<base64 encoded certificate>"
        
        

      credentialTemplates: {}
    # github-enterprise-creds-1:
    #   url: https://github.com/argoproj
    #   githubAppID: 1
    #   githubAppInstallationID: 2
    #   githubAppEnterpriseBaseUrl: https://ghe.example.com/api/v3  https://github.com/api/v3
    #   githubAppPrivateKey: |
    #     -----BEGIN OPENSSH PRIVATE KEY-----
    #     ...
    #     -----END OPENSSH PRIVATE KEY-----
    # https-creds:
    #   url: https://github.com/argoproj
    #   password: my-password
    #   username: my-username
    # ssh-creds:
    #  url: git@github.com:argoproj-labs
    #  sshPrivateKey: |
    #    -----BEGIN OPENSSH PRIVATE KEY-----
    #    ...
    #    -----END OPENSSH PRIVATE KEY-----

  # -- Annotations to be added to `configs.credentialTemplates` Secret
      credentialTemplatesAnnotations: {}

# 1.Argocd Controller        
    controller:
    
      replicas: 1 #3
      nodeSelector: {}
      tolerations: []

      serviceAccount:
        create: true
        name: argocd-application-controller
        annotations: {}
        #  eks.amazonaws.com/role-arn: arn:aws:iam::account_id:role-name  # i think it will not be necessary
        labels: {}
        automountServiceAccountToken: true
        
        
      podAnnotations:  {}


# 2. Dex      
    dex:
      enabled: false
 
    
# 3. redis-ha      
    redis-ha:
      enabled: false
      exporter:
        enabled: false # true
        


      haproxy:
        enabled: false
        
        
      nodeSelector: {}
      # -- [Tolerations] for use with node taints for Redis pods.
      tolerations: []

 
# 4. Argocd server 
    server:
      replicas: 1
      
          # ArgoCD Extension CRD    
      extensions:
        enabled: true
        image:
          repository: "quay.io/argoprojlabs/argocd-extension-installer"
          tag: "v0.0.5"
          imagePullPolicy: ""          

        resources: 
          limits:                  
            cpu: 50m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        extensionList:
          - name: rollout-extension
            env:
              - name: EXTENSION_URL
                value: https://github.com/argoproj-labs/rollout-extension/releases/download/v0.3.7/extension.tar
      
      
      autoscaling:
        enabled: true
        minReplicas: 2  
        maxReplicas: 5
        targetCPUUtilizationPercentage: 50
        targetMemoryUtilizationPercentage: 50
        
        
        
      serviceAccount:
        create: true
        name: argocd-server
        annotations: {}
        #  eks.amazonaws.com/role-arn: arn:aws:iam::account_id:role-name  # i think it will not be necessary
        labels: {}
        automountServiceAccountToken: true
        

    
      podAnnotations: {}
        
 
      nodeSelector: {}

      tolerations: []
       

# 5. RepoServer    
    repoServer:
      name: repo-server
      replicas: 1  # 10

      autoscaling:
        enabled: true
        minReplicas: 1 # 10
        maxReplicas: 5 # 30
        targetCPUUtilizationPercentage: 70  
        targetMemoryUtilizationPercentage: 70 
      
      podAnnotations: {}

      resources: {}   # update in SA (1000m - 2000m) (1Gi - 2Gi)
      #  limits:
      #    cpu: 50m
      #    memory: 128Mi
      #  requests:
      #    cpu: 10m
      #    memory: 64Mi

      nodeSelector: {}


      tolerations: []
      
 
 # 6. ApplicationSet Controller      
    applicationSet:

      enabled: true
      replicas: 1  #2
 
      extraArgs: []

      podAnnotations: {}

      nodeSelector: {}

      tolerations: []
      
      args:
        policy-update:
          create-update
    
# 7. Notifier 
    notifications:
      enabled: false

      notifiers: {}
        # service.slack: |
        #   token: $slack-token

   
      podAnnotations: {}


      nodeSelector: {}
      tolerations: []      
      
     
    # Ingress in case of eks
  
  

     
    ## Server service configuration
    service:
    # -- Server service annotations
      annotations: {}
    # -- Server service labels
      labels: {}
    # -- Server service type
      type: NodePort   # change it to NodePort
      
      

inClusterCredentials:
  minikube-cluster:
    annotations:
      server:   "https://kubernetes.default.svc"   
    labels:                                                                           
      clusterName: minikube-cluster

repositoryCredentials:
  k8s:
    url: https://github.com/yup3219/efk-minikube.git
    username: yup3219
    password: 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
          